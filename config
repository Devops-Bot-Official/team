
mode: remote
identifier: test
category: dev
username: root
jobs:
  - stages:
      - name: Docker
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/artifacts"
            source_url: "https://github.com/deeeye2/simple-website.git"

      - name: webhook
        tasks:
          webhook:
            enabled: true
            source_url: "https://github.com/deeeye2/simple-website.git"
            method: "pull"
            branch: "main"
            clone_dir: "/tmp/artifacts"
            execution_file: "deployment.yaml"
            execution_results: "/tmp/webhook_results/build-no-1.json"
        
    

      - name: Docker Build
        tasks:
          docker_build:
            enabled: true
            output_dir: "/tmp/docker_artifacts"
            dockerfile_path: "/tmp/artifacts/Dockerfile"
            image_name: "my-docker-image"
            image_tag: "latest"
            build_tag: "latest"

      - name: Trivy Scan
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Starting Trivy scan on Docker image...'"
              - "mkdir -p /tmp/trivy_results"
              - |
                trivy image my-docker-image:latest \
                  --format json \
                  --output /tmp/trivy_results/scan_report.json \
                  --severity LOW,MEDIUM,HIGH,CRITICAL \
                  --timeout 5m \
                  --vuln-type os,library \
                  --ignore-unfixed
              - |
                if [ -f /tmp/trivy_results/scan_report.json ]; then
                  echo 'Trivy scan completed successfully.';
                else
                  echo 'Trivy scan failed or report is missing.';
                fi
      - name: Git Update Pipeline
        tasks:
          git_update:
            enabled: true
            config_file: "/path/to/config.yaml"
            new_version: "2.0.0"
            commit_message: "Update configuration dynamically"
            branch: "master"
            credentials:
              pat: ""


mode: remote
identifier: devops-bot
category: dev
username: root
job_count: 3  # Number of concurrent jobs to run

jobs:
  - stages:
      - name: Docker
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/artifacts"
            source_url: "https://github.com/deeeye2/simple-website.git"

      - name: Docker Build
        tasks:
          docker_build:
            enabled: true
            dockerfile_path: "/tmp/artifacts/Dockerfile"
            image_name: "dob-trial-build"
            image_tag: "v6"
            build_tag: "v6"

      - name: Docker Hub
        tasks:
          docker_hub:
            enabled: true
            username: "deeeye2"
            password: "${ver.pass}"
            repository: "dob-trial-build"
            image_tag: "v6"

      - name: Post-Build
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Job 1 completed'"

  - stages:
      - name: ANT
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/clone_repo_trial2"
            source_url: "https://github.com/deeeye2/ant-example.git"


      - name: ANT Build
        tasks:
          ant:
            enabled: true
            build_file: "build.xml"
            target: "build"
            output_dir: "/root/ant_artifacts"
      - name: Post-Build
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Job 2 completed'"


  - stages:
      - name: Webpack Setup
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/clone_repo_trial3"
            source_url: "https://github.com/deeeye2/webpack-website.git"


      - name: Webpack Build
        tasks:
          webpack:
            enabled: true
            output_dir: "/tmp/webpack_artifacts"

      - name: Custom
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Custom script execution...'"
              - "mkdir -p /tmp/custom_script_dir"
              - "echo 'Job 3 completed' > /tmp/custom_script_dir/complete.txt"
    
      - name: SonarQube Analysis
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Starting SonarQube analysis...'"
              - "mkdir -p /tmp/sonar_results"
              - "sonar-scanner -Dsonar.projectKey=devops-bot \
                               -Dsonar.sources=/tmp/artifacts \
                               -Dsonar.projectBaseDir=/tmp/artifacts \
                               -Dsonar.host.url=http://98.80.255.125:9000" \
                               -Dsonar.login=sqp_e4592e8983abdcf4573da6c9a777fd30d30034e7 \
                               -Dsonar.report.export.path=/tmp/sonar_results/sonar-report.json"
              - "if [ -f /tmp/sonar_results/sonar-report.json ]; then echo 'SonarQube analysis completed successfully.'; else echo 'SonarQube analysis failed or report is missing.'; fi"

###############################################################################

mode: remote
identifier: ${ver.identifier}"
category: dev
username: root

jobs:
  - stages:
      - name: Gradel Setup
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: ${ver.clone_dir}"
            source_url: ${ver.source_url}"


      - name: Gradel Build
        tasks:
          gradle:
            enabled: true
            target: "build"
            output_dir: ${ver.output_dir}"


mode: remote
identifier: devops-bot
category: build
username: root

jobs:
  - stages:
      - name: Maven Setup
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/clone_repo_trial2"
            source_url: "https://github.com/deeeye2/projectweb.git"


      - name: maven Build
        tasks:
          Maven:
            enabled: true
            project_pom: "pom.xml"
            goals: "clean install"
            archive_format: "zip"
            output_dir: "/tmp/maven_artifacts"

dob dobbuild build --rc https://raw.githubusercontent.com/deeeye2/remote-var/master/configuration.yaml --rv https://raw.githubusercontent.com/deeeye2/remote-var/master/remote.yaml
dob dobbuild build --file-path /root/test/task/dobbuild-shell-yaml --rv https://raw.githubusercontent.com/deeeye2/remote-var/master/remote.yaml
https://github.com/deeeye2/remote-var/tree/master
https://raw.githubusercontent.com/deeeye2/veriable/master/ver.yaml

xZ5_sQ_HSeoTHmGW8I9rGWdBQUFBQUJuY1R4Q0R6aDFURWhGNXJmZzljRjVnY1N4eGhiY1M2N1NYVFZGM2t0ZTE0YTlkaUVIWGUweWlVdnVWRHljYk5KcGp3TnhRMVlFb0NMaWhoRWlpRUI5eGJ1Rnl3PT0=

      - name: Trivy Scan
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Starting Trivy scan...'"
              - "mkdir -p /tmp/trivy_results"
              - >
                trivy image my-docker-image:latest \
                --format json \
                --output /tmp/trivy_results/scan_report.json \
                --severity LOW,MEDIUM,HIGH,CRITICAL \
                --timeout 5m \
                --vuln-type os,library \
                --security-checks vuln,config \
                --ignore-unfixed \
                --ignorefile /tmp/.trivyignore \
                --skip-update
              - >
                if [ -f /tmp/trivy_results/scan_report.json ]; then
                  echo 'Trivy scan completed successfully.';
                else
                  echo 'Trivy scan failed or report is missing.';
                fi

variables:
  password:
    value: ${xZ5_sQ_HSeoTHmGW8I9rGWdBQUFBQUJuY1R4Q0R6aDFURWhGNXJmZzljRjVnY1N4eGhiY1M2N1NYVFZGM2t0ZTE0YTlkaUVIWGUweWlVdnVWRHljYk5KcGp3TnhRMVlFb0NMaWhoRWlpRUI5eGJ1Rnl3PT0=}
    sensitive: true





mode: remote
identifier: test
category: build
username: root

jobs:
  - stages:
      - name: ANT
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/clone_repo_trial2"
            source_url: "https://github.com/deeeye2/ant-example.git"


      - name: ANT Build
        tasks:
          ant:
            enabled: true
            build_file: "build.xml"
            target: "build"
            output_dir: "/root/ant_artifacts"

      - name: TestNG Testing
        tasks:
          testng:
            enabled: true
            result_dir: "/tmp/testng_results"
            store_results: true

      - name: Docker Hub Push
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Starting Docker Hub push process...'"
              - |
                docker login -u "devopsbotofficial" -p "Freetownsierraleone1@" \
                  || { echo 'Docker login failed'; exit 1; }
              - |
                docker tag devops-bot:latest devopsbotofficial/devops-bot:latest \
                  || { echo 'Failed to tag the Docker image'; exit 1; }
              - |
                docker push devopsbotofficial/devops-bot:latest \
                  || { echo 'Docker push failed'; exit 1; }
              - |
                if docker images | grep -q 'devopsbotofficial/devops-bot'; then
                  echo 'Docker Hub push completed successfully.';
                else
                  echo 'Docker Hub push failed.';
                  exit 1;
                fi


mode: remote
identifier: test
category: build
username: root

jobs:
  - stages:
      - name: ANT
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/clone_repo_trial2"
            source_url: "https://github.com/deeeye2/ant-example.git"

      - name: ANT Build
        tasks:
          ant:
            enabled: true
            build_file: "build.xml"  # Path to the Ant build file
            target: "build"          # The target to execute in the Ant script
            output_dir: "/root/ant_artifacts"  # Directory to move generated artifacts
            servlet_api_jar: "/usr/share/java/servlet-api.jar"  # Path to Servlet API JAR
            servlet_api_url: "https://repo1.maven.org/maven2/javax/servlet/javax.servlet-api/4.0.1/javax.servlet-api-4.0.1.jar"  # Servlet API download URL

            # Ant-specific options
            properties:               # Custom properties to pass to Ant
              src.dir: "src"
              build.dir: "build"
              dist.dir: "dist"
            options:                  # Additional Ant options
              - "-verbose"            # Enable verbose output
              - "-debug"              # Enable debugging mode


mode: remote
identifier: test
category: dev
username: root
jobs:
  - stages:
      - name: Docker
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/artifacts"
            source_url: "https://github.com/deeeye2/simple-website.git"

      - name: SonarQube Analysis       

        tasks:
          sonarqube_analysis:
            enabled: true
            server_url: "http://34.204.90.253:9000/"
            project_key: "devops-bot"
            token: "sqp_e4592e8983abdcf4573da6c9a777fd30d30034e7"
            source_dir: "/tmp/artifacts"
            output_dir: "/tmp/sonar_results"
  
      - name: Docker Build
        tasks:
          docker_build:
            enabled: true
            output_dir: "/tmp/docker_artifacts"
            dockerfile_path: "/tmp/artifacts/Dockerfile"
            image_name: "my-docker-image"
            image_tag: "latest"
            build_tag: "latest"

      - name: trivy
        tasks:
          trivy:
            enabled: true
            target_type: "image"           # "image" or "filesystem"
            target: "my-docker-image:latest"
            output_dir: "/tmp/trivy_results"
            format: "json"  
    

      tasks:
        sonarqube_analysis:
          enabled: true
          server_url: "http://sonarqube.example.com"
          project_key: "my-project"
          token: "your-sonar-token"
          source_dir: "/path/to/source"
          output_dir: "/tmp/sonar_results"
      http://98.80.255.125:9000/projects





mode: remote
identifier: test
category: dev
username: root

jobs:
  - stages:
      - name: ZAP Scan
        tasks:
          zap_scan:
            enabled: true
            target_url: "http://example.com"
            scan_type: "full"  # Options: "quick", "spider", "api", "full"
            output_dir: "/tmp/zap_results"
            report_format: "html"  # Options: "html", "xml", "json"
            additional_args: "--auth-username admin --auth-password password"


      - name: OWASP ZAP Scan
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Starting OWASP ZAP scan...'"
              - "mkdir -p /tmp/zap_results"
              - >
                /usr/local/zap/zap.sh -cmd -newsession /tmp/zap_results/zap_session \
                  -t http://example.com \
                  -quickout /tmp/zap_results/zap_report.html \
                  --auth-username admin \
                  --auth-password password
              - >
                if [ -f /tmp/zap_results/zap_report.html ]; then
                  echo 'OWASP ZAP scan completed successfully.';
                else
                  echo 'OWASP ZAP scan failed or report is missing.';
                fi




mode: remote
identifier: devops-bot
category: test
username: root

jobs:
  - stages:
      - name: TestNG
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/clone_repo_testng"
            source_url: "https://github.com/deeeye2/testng-example.git"

      - name: TestNG Testing
        tasks:
          testng:
            enabled: true
            result_dir: "/tmp/testng_results"
            store_results: true


- name: xUnit Testing
  tasks:
    xunit:
      enabled: true
      solution_file: "App.sln"
      test_dir: "tests"
      result_dir: "/tmp/xunit_results"
      store_results: true


- name: Mocha Testing
  tasks:
    mocha:
      enabled: true
      test_dir: "test"
      result_dir: "/tmp/mocha_results"
      store_results: true

- name: Selenium Testing
  tasks:
    selenium:
      enabled: true
      test_dir: "tests"
      result_dir: "/tmp/selenium_results"
      store_results: true
      browser: "chrome"  # or "firefox"



- name: Trivy Scanning
  tasks:
    trivy:
      enabled: true
      target_type: "image"  # Can be "image" or "filesystem"
      target: "dob-trial-build:v6"  # Docker image name or directory path
      output_dir: "/tmp/trivy_results"
      format: "json"  # Can be "table", "json", or "sarif"


trivy:
  enabled: true
  target_type: "image"
  target: "dob-trial-build:v6"
  output_dir: "/tmp/trivy_results"
  format: "json"


- name: OWASP ZAP Scanning
  tasks:
    owasp_zap:
      enabled: true
      target_url: "http://example.com"
      scan_type: "full"  # "quick" or "full"
      output_dir: "/tmp/zap_results"
      report_format: "html"  # Can be "html", "json", or "xml"


owasp_zap:
  enabled: true
  target_url: "http://example.com"
  scan_type: "quick"
  output_dir: "/tmp/zap_results"
  report_format: "html"


- name: Nessus Scanning
  tasks:
    nessus_scan:
      enabled: true
      target: "192.168.1.1"
      scan_template: "basic"  # Template for the scan
      output_dir: "/tmp/nessus_results"
      report_format: "html"  # Can be "html" or "csv"


- name: SonarQube Analysis
  tasks:
    sonarqube_analysis:
      enabled: true
      source_dir: "src"
      output_dir: "results/sonar_results"
      sonar_host_url: "http://localhost:9000"
      sonar_login_token: "your_sonarqube_token"


  - stages:
      - name: Git Update Pipeline
        tasks:
          git_update:
            enabled: true
            config_file: "/path/to/config.yaml"
            new_version: "2.0.0"  # Optional; if not provided, timestamp will be used
            commit_message: "Update configuration dynamically"
            branch: "main"  # Target branch
            credentials:
              type: "ssh"  # Options: "ssh", "pat"
              ssh_key_path: "/home/root/.ssh/id_rsa"  # Required for SSH
              pat: "ghp_YourPersonalAccessTokenHere"  # Required for PAT



version: "1.0"

remote-server:
  - identifiers: "docker"
    username: "root"
    category: dev

tasks:
  - name: "Build Project Artifact"
    action: "BUILD"
    source_url: "https://github.com/deeeye2/simple-website.git"
    artifact_dir: "/tmp/artifacts"
    tool: "s3"
    credential_name: "aws-credental"
    s3_bucket_name: "teste-bucket-trial001"
    archive_format: "zip"
    clean_old_build: "fals"
    retries: 3
    image_name: "my-artifact-image:latest"
    identifiers: "docker"
    category: "ops"




mode: remote
identifier: devops-bot
category: dev
username: root
task:
  install_dependencies: true
  clone_repository: true
  clone_dir: "/tmp/artifacts"
  source_url: "https://github.com/deeeye2/simple-website.git"

  docker_build: true
  docker_hub:
    enabled: true
    username: "deeeye2"
    password: "Sierraleone1@"
    repository: "dob-trial-build"
    image_tag: "v4"            # Tag for Docker Hub push
    build_tag: "v4"            # Tag used during the Docker build

  clean_old_build: true
  cleanup_clone: true


mode: remote
identifier: devops-bot
category: dev
username: root
tasks:
  source_url: "https://github.com/deeeye2/projectweb.git"
  artifact_dir: "/tmp/artifacts"
  archive_format: "zip"
  image_name: "mavin-build"

  maven:
    enabled: true
    project_pom: "pom.xml"
    goals: "clean install"
    artifact_output_dir: "/root/maven_artifacts"


mode: remote
identifier: devops-bot
category: dev
username: root
tasks:
  source_url: "https://github.com/deeeye2/simple-web-app.git"
  artifact_dir: "/tmp/artifacts"
  archive_format: "zip"
  image_name: "gradle-build"

  gradle:
    enabled: true
    tasks: "build"
    artifact_output_dir: "/tmp/gradle_artifacts"




mode: remote
identifier: devops-bot
category: dev
username: root

tasks:
  source_url: "https://github.com/deeeye2/ant-example.git"
  clone_dir: "/tmp/clone_repo_trial"
  artifact_dir: "/tmp/ant_artifacts"
  clone_repository: true
  ant:
    enabled: true
    build_file: "build.xml"
    target: "build"
    artifact_output_dir: "/root/ant_artifacts"

mode: remote
identifier: devops-bot
category: dev
username: root
tasks:
  source_url: "https://github.com/deeeye2/pip-example.git"
  clone_dir: "/tmp/clone_repo_trial"
  clone_repository: true
  pip:
    enabled: true
    requirements_file: "requirements.txt"
    script: "app.py"  # Optional: Script to run
    output_dir: "/tmp/pip_artifacts"

mode: remote
identifier: devops-bot
category: dev
username: root
tasks:
  source_url: "https://github.com/deeeye2/setuptools-example.git"  # Replace with your actual repository URL
  clone_dir: "/tmp/clone_repo_trial"
  setuptools:
    enabled: true
    setup_file: "setup.py"
    output_dir: "/tmp/setuptools_artifacts"



tasks:
  source_url: "https://github.com/deeeye2/my_poetry_app.git"  # Replace with your actual repository URL
  clone_dir: "/tmp/clone_repo_trial"
  clone_repository: true
  poetry:
    enabled: true
    output_dir: "/tmp/poetry_artifacts"

tasks:
  sh:
    enabled: true
    steps:
      - "echo 'Starting custom script execution...'"
      - "mkdir -p /tmp/custom_script_dir"
      - "echo 'Custom Task Complete' > /tmp/custom_script_dir/complete.txt"


mode: remote
identifier: devops-bot
category: dev
username: root
stages:
  - name: ANT
    tasks:
      source_url: "https://github.com/deeeye2/ant-example.git"
      clone_dir: "/tmp/clone_repo_trial"
      artifact_dir: "/tmp/ant_artifacts"
      clone_repository: true
      ant:
        enabled: true
        build_file: "build.xml"
        target: "build"
        artifact_output_dir: "/root/ant_artifacts"
    
  - name: Docker
    tasks:
      clone_repository: true
      clone_dir: "/tmp/artifacts"
      source_url: "https://github.com/deeeye2/simple-website.git"   
      docker_build: true
      docker_hub:
        enabled: true
        username: "deeeye2"
        password: "Sierraleone1@"
        repository: "dob-trial-build"
        image_tag: "v6"            # Tag for Docker Hub push
        build_tag: "v6"            # Tag used during the Docker build
    
  - name: Post-Build
    tasks:
      sh:
        enabled: true
        steps:
          - "echo 'Starting custom script execution...'"
          - "mkdir -p /tmp/custom_script_dir"
          - "echo 'Custom Task Complete' > /tmp/custom_script_dir/complete.txt"
    
mode: remote
identifier: devops-bot
category: dev
username: root
stages:
  - name: setuptools
    tasks:
      source_url: "https://github.com/deeeye2/setuptools-example.git"  # Replace with your actual repository URL
      clone_dir: "/tmp/clone_repo_trial"
      clone_repository: true
      setuptools:
        enabled: true
        setup_file: "setup.py"
        output_dir: "/tmp/setuptools_artifacts"
    
mode: remote
identifier: devops-bot
category: dev
username: root

stages:
  - stage_name: npm-build-stage
    tasks:
      clone_repository: true
      source_url: https://github.com/deeeye2/sample-npm-website.git
      npm:
        enabled: true
        output_dir: /tmp/npm_artifacts
  

mode: remote
identifier: devops-bot
category: dev
username: root
stages:
  - name: "Yarn Build Stage"
    tasks:
      source_url: "https://github.com/deeeye2/setuptools-example.git"  # Replace with your actual repository URL
      clone_dir: "/tmp/clone_repo_trial"
      clone_repository: true
      yarn:
        enabled: true  # Enable Yarn build
        build_script: "build"  # Yarn build script to execute
        output_dir: "/tmp/yarn_artifacts"  # Output directory for build artifacts


mode: remote
identifier: devops-bot
category: dev
username: root

  stages:
    - name: Webpack Setup
      tasks:
        source_url: "https://github.com/deeeye2/webpack-website.git"  # Replace with your actual repository URL
        clone_dir: "/tmp/clone_repo_trial"
        clone_repository: true
        webpack:
          enabled: true
          output_dir: "/tmp/webpack_artifacts"
  

mode: remote
identifier: devops-bot
category: web
username: root
stages:
  - name: parcel-build
    tasks:
      source_url: "https://github.com/deeeye2/webpack-website.git"  # Replace with your repo
      clone_dir: "/tmp/clone_repo_trial"
      clone_repository: true
      parcel:
        enabled: true
        output_dir: "/tmp/parcel_artifacts"

mode: remote
identifier: devops-bot
category: dev
username: root
stages:
  - name: code-fetch
    tasks:
      source_url: "https://github.com/deeeye2/rollup-simple-app.git"
      clone_dir: "/tmp/clone_repo_trial"
      clone_repository: true

  - name: rollup
    tasks:
      rollup:
        enabled: true
        output_dir: "/tmp/rollup_artifacts"

mode: remote
identifier: devops-bot
category: build
username: root
stages:
  - name: meson_build
    tasks:
      source_url: "https://github.com/your-repo/simple-meson-app.git"
      clone_dir: "/tmp/clone_repo_trial"
      clone_repository: true
      meson:
        enabled: true
        output_dir: "/tmp/meson_artifacts"

mode: remote
identifier: devops-bot
category: build
username: root
stages:
    - name: bazel_build
      tasks:
        source_url: "https://github.com/example/bazel-app.git" # Replace with your repository URL
        clone_dir: "/tmp/clone_repo_trial"
        clone_repository: true
        bazel:
          enabled: true
          output_dir: "/tmp/bazel_artifacts"
  

mode: remote
identifier: devops-bot
category: dev
username: root
stages:
    - name: fetch-code
    tasks:
      source_url: "https://github.com/deeeye2/pip-example.git"
      clone_dir: "/tmp/clone_repo_trial"
      clone_repository: true

    - name: pip_build
    tasks:   
      pip:
        enabled: true
        requirements_file: "requirements.txt"
        script: "app.py"
        output_dir: "/tmp/pip_artifacts"

    - name: custom_build
    tasks:   
      sh:
        enabled: true
        steps:
          - "echo 'Starting custom script execution...'"
          - "mkdir -p /tmp/custom_script_dir"
          - "echo 'Custom Task Complete' > /tmp/custom_script_dir/complete.txt"
    

    mode: remote
identifier: devops-bot
category: dev
username: root
job_count: 1  # Number of concurrent jobs to run

jobs:
  - stages:

      - name: Setup Environment
        tasks:
          clone_dir:
            enabled: true
            path: "/tmp/setup_env"
        - name: fetch-code
          tasks:        
          clone_repository:
            enabled: true
            source_url: "https://github.com/deeeye2/pip-example.git"
    
        - name: pip_build
          tasks:   
            pip:
              enabled: true
              requirements_file: "requirements.txt"
              script: "app.py"
              output_dir: "/tmp/pip_artifacts"
    
        - name: custom_build
          tasks:   
            sh:
              enabled: true
              steps:
                - "echo 'Starting custom script execution...'"
                - "mkdir -p /tmp/custom_script_dir"
                - "echo 'Custom Task Complete' > /tmp/custom_script_dir/complete.txt"


mode: remote
identifier: devops-bot
category: dev
username: root
job_count: 1  # Number of concurrent jobs to run

jobs:
  - stages:
        - name: fetch-code
          tasks:
            source_url: "https://github.com/deeeye2/pip-example.git"
            clone_dir: "/tmp/clone_repo_trial"
            clone_repository: true

        - name: pip_build
          tasks:
            pip:
              enabled: true
              requirements_file: "requirements.txt"
              script: "app.py"
              output_dir: "/tmp/pip_artifacts"

        - name: custom_build
          tasks:
            sh:
              enabled: true
              steps:
                - "echo 'Starting custom script execution...'"
                - "mkdir -p /tmp/custom_script_dir"
                - "echo 'Custom Task Complete' > /tmp/custom_script_dir/complete.txt"
~
mode: remote
identifier: devops-bot
category: build
username: root

jobs:
  - stages:
      - name: Setup and Clone
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/go_project"
            source_url: "https://github.com/deeeye2/go-example-app.git"

      - name: Go Build
        tasks:
          go:
            enabled: true
            output_dir: "/tmp/go_artifacts"

mode: remote
identifier: devops-bot
category: build
username: root

jobs:
  - stages:
      - name: Setup and Clone
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/sample_rake_project"
            source_url: "https://github.com/deeeye2/sample_rake_project.git"

      - name: Rake Build
        tasks:
          rake:
            enabled: true
            task: "build"


mode: remote
identifier: devops-bot
category: build
username: root

jobs:
  - stages:
      - name: Git Update Pipeline
        tasks:
          git_update:
            enabled: true
            config_file: "/path/to/config.yaml"
            new_version: "2.0.0"
            commit_message: "Update configuration dynamically"
            branch: "main"
            credentials:
              pat: "ghp_YourPersonalAccessTokenHere"


mode: remote
identifier: test
category: dev
username: root
jobs:
  - stages:
      - name: Docker
        tasks:
          setup_and_clone:
            enabled: true
            clone_dir: "/tmp/artifacts"
            source_url: "https://github.com/deeeye2/simple-website.git"

      - name: trivy-file
        tasks:
          trivy:
            enabled: true
            target_type: "filesystem"
            target: "/tmp/artifacts"
            output_dir: "/tmp/trivy_results-file"
            format: "json"
            severity: "LOW,MEDIUM,HIGH,CRITICAL"

      - name: Docker Build
        tasks:
          docker_build:
            enabled: true
            output_dir: "/tmp/docker_artifacts"
            dockerfile_path: "/tmp/artifacts/Dockerfile"
            image_name: "my-docker-image"
            image_tag: "latest"
            build_tag: "latest"

      - name: Trivy Scan
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Starting Trivy scan on Docker image...'"
              - "mkdir -p /tmp/trivy_results"
              - |
                trivy image my-docker-image:latest \
                  --format json \
                  --output /tmp/trivy_results/scan_report.json \
                  --severity LOW,MEDIUM,HIGH,CRITICAL \
                  --timeout 5m \
                  --vuln-type os,library \
                  --ignore-unfixed
              - |
                if [ -f /tmp/trivy_results/scan_report.json ]; then
                  echo 'Trivy scan completed successfully.';
                else
                  echo 'Trivy scan failed or report is missing.';
                fi
      - name: Git Update Pipeline
        tasks:
          git_update:
            enabled: true
            file: "/tmp/artifacts/devops-config.yaml"
            field_path: "jobs[5].stages[0].tasks.git_update.new_value"
            new_value: "0.0.0"
            commit_message: "Update configuration dynamically"
            branch: "master"
            credentials:
              pat: "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"

      - name: repo check update
        tasks:
          sh:
            enabled: true
            steps:
              - "echo 'Checking for the configuration file...'"
              - |
                if [ -f /tmp/artifacts/devops-config.yaml ]; then
                  echo 'Configuration file exists:'
                  cat /tmp/artifacts/devops-config.yaml
                else
                  echo 'Configuration file not found; exiting pipeline.'
                  exit 1
                fi
              - "echo 'Configuration file validation completed.'"

      - name: Git Update Pipeline
        tasks:
          git_update:
            enabled: true
            clone_dir: "/tmp/artifacts"
            file: "devops-config.yaml"
            field_path: "jobs[0].stages[4].tasks.git_update.new_value"
            new_value: "2.0.0"
            commit_message: "Update configuration dynamically"
            branch: "master"
            remote_url: "https://github.com/deeeye2/simple-website"
            username: "deeeye2"
            pat: "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"
      

  https://raw.githubusercontent.com/deeeye2/resurces/master/ec2.yaml
